#!/bin/bash

cat_example() {
	cat <<EOF
----- >8 -----------------------------------------------------------------------

/* --- messages --- */

struct  _Message
{
  ProtobufCMessage base;
  protobuf_c_boolean has_type;
  int32_t type;
  char *data;
};
#define MESSAGE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&message__descriptor) \
    , 0,0, NULL }


/* Message methods */
void   message__init
                     (Message         *message);
size_t message__get_packed_size
                     (const Message   *message);
size_t message__pack
                     (const Message   *message,
                      uint8_t             *out);
size_t message__pack_to_buffer
                     (const Message   *message,
                      ProtobufCBuffer     *buffer);
Message *
       message__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   message__free_unpacked
                     (Message *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Message_Closure)
                 (const Message *message,
                  void *closure_data);

/* --- services --- */

----- >8 -----------------------------------------------------------------------
message Message {
	int32 type = 1;
	string data = 2;
}
EOF

	cat <<EOF
----- >8 -----------------------------------------------------------------------

/* --- enums --- */

typedef enum _Corpus {
  CORPUS__UNIVERSAL = 0,
  CORPUS__WEB = 1,
  CORPUS__IMAGES = 2,
  CORPUS__LOCAL = 3,
  CORPUS__NEWS = 4,
  CORPUS__PRODUCTS = 5,
  CORPUS__VIDEO = 6
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(CORPUS)
} Corpus;

/* --- messages --- */

enum Corpus {
	UNIVERSAL = 0;
	WEB = 1;
	IMAGES = 2;
	LOCAL = 3;
	NEWS = 4;
	PRODUCTS = 5;
	VIDEO = 6;
}
EOF
}

enum() {
	sed -n -e '/typedef enum _/,/} .\+;/p' "$@" |
	sed    -e '/^typedef enum _/s,typedef enum _\(.*\) {,enum \1 {,;/PROTOBUF_C__/d' \
	       -e '/^  .\+__.\+ = /s/[A-Z0-9_]\+__\([A-Z0-9_]\+ = [0-9]\+\),\?/\1;/' \
	       -e '/^} .\+;$/s, .\+;,,'
}

message() {
#	       -e '/protobuf_c_boolean/{h;N;G;D}' | \
#	       -e '/protobuf_c_boolean/{s/^.*$/optional/;s/\n/b/;h;N;G}' | \
	sed -n -e '/struct  _/,/};/p' "$@" |
#	sed    -e '/^struct  _/s,struct  _\(.*\),message \1 {,;/ProtobufCMessage/d;/protobuf_c_boolean/d;/^{/d' \
	sed    -e '/^struct  _/s,struct  _\(.*\),message \1 {,;' \
	       -e '/^{/d' \
	       -e '/^};$/s,;$,,' \
	       -e '/protobuf_c_boolean/{s,protobuf_c_boolean,// optional,;s,has_,,}' \
	       -e '/ProtobufCMessage/d' | \
	sed    -e '/int[0-9]\+_t/s,_t,,' \
	       -e '/char \+\*/s,char \+\*,string ,' \
	       -e '/ProtobufCBinaryData \+/s,ProtobufCBinaryData,bytes,' \
	       -e '/.* \*.*;/s,\*,,'
}

protoc() {
	echo "/* Generated by the protocol buffer DEcompiler.  EDIT AS NEEDED! */"
	echo

	echo "syntax = \"$syntax\";"
	echo

	echo "/* === enums === */"
	echo
	enum "$@"

	echo
	echo "/* === messages === */"
	echo
	message "$@"
}

syntax="proto2"
protoc "$@" | \
while read -r line; do
	# //
	if [[ $line =~ ^//\ optional ]]; then
		words=( $line )
		context="${words[@]:1:1}"
#		echo "$line"
		continue
	elif [[ $line =~ ^//\ optional ]]; then
		echo "$line"
		continue
	fi

	if [[ $context ]]; then
		line="$context $line"
		unset context
	fi

	# end of message or enumerate
	if [[ $line =~ ^} ]]; then
#echo -n "<<<<< "
		unset index
		unset indent
	# repeated
	elif [[ $line =~ ^size_t\ n_ ]]; then
#echo -n "RRRRR "
		keyword="repeated"
		continue
	# message field or enumerate value
	elif [[ $index ]]; then
#echo -n "INDEX "
		index="$((index+1))"
		line="${line/;/ = $index;}"

		if [[ $keyword == repeated ]]; then
			line="$keyword ${line/\*/}"
		fi
		unset keyword

		# proto2: Expected "required", "optional", or "repeated".
		if [[ $syntax == "proto2" ]]; then
			words=( $line )
			if [[ ! ${words[0]} =~ (required|optional|repeated) ]]; then
				line="required $line"
			fi
		fi
	# begin of message
	elif [[ $line =~ ^message ]]; then
#echo -n "MMMMM "
		indent="  "
		index="0"
		echo "$line"
		continue
	# begin of enumerate
	elif [[ $line =~ ^enum ]]; then
#echo -n "EEEEE "
		echo "$line"
		indent="  "
		continue
	fi
#echo -n "????? "
	echo "$indent$line"
done



exit
-typedef struct _NwkAddressStructT NwkAddressStructT;
+typedef struct _GwAddressStructT GwAddressStructT;

GwZigbeeGenericRspInd
